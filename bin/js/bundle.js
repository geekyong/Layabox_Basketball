var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var GameMgr_1 = require("./script/GameMgr");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("script/GameMgr.ts", GameMgr_1.default);
    };
    GameConfig.width = 960;
    GameConfig.height = 640;
    GameConfig.scaleMode = "fixedheight";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "middle";
    GameConfig.alignH = "center";
    GameConfig.startScene = "game.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./script/GameMgr":4}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene);
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BallCtrl = /** @class */ (function (_super) {
    __extends(BallCtrl, _super);
    function BallCtrl() {
        var _this = _super.call(this) || this;
        _this.maxForce = 6.5;
        _this.minForce = 4.5;
        return _this;
    }
    BallCtrl.prototype.onAwake = function () {
        this.rigid = this.owner.getComponent(Laya.Rigidbody3D);
        Laya.stage.on(Laya.Event.MOUSE_DOWN, this, this.onMouseDown);
        Laya.stage.on(Laya.Event.MOUSE_UP, this, this.onMouseUp);
        this.curBallState = BallState.Idle;
        this.groupSpeed = (this.maxForce - this.minForce) / 2.5;
        this.addForce = 0;
    };
    BallCtrl.prototype.onUpdate = function () {
        var dt = Laya.timer.delta / 1000;
        if (this.curBallState == BallState.AddForce) {
            this.addForce += dt * this.groupSpeed;
            if (this.addForce > this.maxForce - this.minForce) {
                this.addForce = this.maxForce - this.minForce;
            }
            var per = this.addForce / (this.maxForce - this.minForce);
            per = per > 1 ? 1 : per;
            Laya.stage.event("set_slider_value", per);
        }
    };
    BallCtrl.prototype.onMouseDown = function () {
        console.log("onMouseDown!");
        Laya.stage.event("hideTweener");
        if (this.curBallState != BallState.Idle) {
            return;
        }
        this.curBallState = BallState.AddForce;
    };
    BallCtrl.prototype.onMouseUp = function () {
        console.log("onMouseUp!");
        if (this.curBallState != BallState.AddForce) {
            return;
        }
        this.curBallState = BallState.Throw;
        this.thorwBall();
    };
    BallCtrl.prototype.thorwBall = function () {
        if (this.curBallState != BallState.Throw) {
            return;
        }
        var speed = this.minForce + this.addForce;
        var vy = speed * Math.sin(Math.PI / 4);
        var vz = vy;
        this.rigid.linearVelocity = new Laya.Vector3(0, vy, vz);
        this.rigid.gravity = new Laya.Vector3(0, -10, 0);
        Laya.timer.once(5000, this, this.onCheckOut);
    };
    BallCtrl.prototype.onCheckOut = function () {
        this.owner.removeSelf();
        Laya.stage.event("gen_new_ball");
    };
    BallCtrl.prototype.onTriggerEnter = function (other) {
        if (this.curBallState == BallState.None) {
            return;
        }
        Laya.stage.event("success");
        this.curBallState = BallState.None;
    };
    BallCtrl.prototype.onDestroy = function () {
        Laya.stage.off(Laya.Event.MOUSE_DOWN, this, this.onMouseDown);
        Laya.stage.off(Laya.Event.MOUSE_UP, this, this.onMouseUp);
    };
    return BallCtrl;
}(Laya.Script3D));
exports.default = BallCtrl;
var BallState;
(function (BallState) {
    BallState[BallState["None"] = 0] = "None";
    BallState[BallState["Idle"] = 1] = "Idle";
    BallState[BallState["AddForce"] = 2] = "AddForce";
    BallState[BallState["Throw"] = 3] = "Throw";
})(BallState || (BallState = {}));
},{}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BallCtrl_1 = require("./BallCtrl");
var GameMgr = /** @class */ (function (_super) {
    __extends(GameMgr, _super);
    function GameMgr() {
        return _super.call(this) || this;
    }
    Object.defineProperty(GameMgr.prototype, "score", {
        get: function () {
            return this._score;
        },
        set: function (v) {
            this._score = v;
            this.scoreText.text = this._score + "";
        },
        enumerable: true,
        configurable: true
    });
    GameMgr.prototype.onAwake = function () {
        var _this = this;
        Laya.Scene3D.load("res/scenes3D/LayaScene_game_scene/Conventional/game_scene.ls", Laya.Handler.create(this, this.onLoadSceneCmp));
        Laya.stage.on("gen_new_ball", this, this.onGenNewBall);
        Laya.stage.on("set_slider_value", this, this.SetSliderValue);
        Laya.stage.on("success", this, this.OnGoal);
        this.SetSliderValue(0);
        this.score = 0;
        this.tweenOver2();
        Laya.stage.on("hideTweener", this, function () {
            if (_this.hintText.visible == true) {
                _this.tweener1.clear();
                _this.tweener2.clear();
                _this.hintText.visible = false;
            }
        });
    };
    GameMgr.prototype.tweenOver1 = function () {
        if (this.tweener1 != null) {
            this.tweener1.clear();
        }
        this.tweener2 = Laya.Tween.to(this.hintText, { "alpha": 1 }, 500, Laya.Ease.linearNone, Laya.Handler.create(this, this.tweenOver2));
    };
    GameMgr.prototype.tweenOver2 = function () {
        if (this.tweener2 != null) {
            this.tweener2.clear();
        }
        this.tweener1 = Laya.Tween.to(this.hintText, { "alpha": 0 }, 500, Laya.Ease.linearNone, Laya.Handler.create(this, this.tweenOver1));
    };
    GameMgr.prototype.SetSliderValue = function (value) {
        if (value < 0 || value >= 1) {
            return;
        }
        this.hSlider.value = value;
    };
    GameMgr.prototype.onGenNewBall = function () {
        this.SetSliderValue(0);
        var newball = Laya.Sprite3D.instantiate(this.ball_prefab);
        this.scene3D.addChild(newball);
    };
    //得分
    GameMgr.prototype.OnGoal = function () {
        console.log(this.part.name);
        this.part.particleSystem.play();
        this.score++;
    };
    GameMgr.prototype.onLoadSceneCmp = function (scenes3D) {
        Laya.stage.addChild(scenes3D);
        this.scene3D = scenes3D;
        scenes3D.zOrder = -1;
        var ball = scenes3D.getChildByName("ball");
        ball.addComponent(BallCtrl_1.default);
        this.ball_prefab = Laya.Sprite3D.instantiate(ball);
        this.part = scenes3D.getChildByName("particle");
    };
    GameMgr.prototype.onEnable = function () {
        console.log("onEnable!!!!!");
    };
    GameMgr.prototype.onDisable = function () {
    };
    return GameMgr;
}(Laya.Script));
exports.default = GameMgr;
},{"./BallCtrl":3}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
